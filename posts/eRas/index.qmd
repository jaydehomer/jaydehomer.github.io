---
title: "the eras touR"
author: "Jayde Homer"
date: "2023-06-06"
categories: [fun]
image: "eras.jpg"
---

Can I ask you a question? Have you ever wondered which of Taylor Swift's songs are the most danceable? Which songs are saddest? Slowest? Lowest? Well, if the answer is no, you're playing a stupid game and you've won a stupid prize -- leave now. Assuming the answer to any of those questions was an incredibly enthusiastic YES, then you're the lucky one. 

So, R you ready for it? 

**DISCLAIMER:** Obviously I'm a *very busy important person* so I'm not going to answer ALL of your questions today, but I'll try my very best to keep coming back and working on this, so please come back and check it out. 

```{r include = FALSE}
# super secret secrets
Sys.setenv(SPOTIFY_CLIENT_ID = 'd02bf172d10540daa563dfb3671241f0')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'c6ea7afd62114def98b269c6b160721b')
```

Here are the packages we'll be using. 

```{r}
#install.packages("spotifyr")
#install.packages("httr")

library(spotifyr)
library(tidyverse)
library(knitr)
library(httr)
```

Using (Spotify's Web API)[https://developer.spotify.com/documentation/web-api], we can access all sorts of fun information about an artist. If you're following along at home and wondering if this is the explicit version with all those Xs below, no. I'm just avoiding giving you my super secret client_id and client_secret. You can get your own by visiting your Spotify developer dashboard. 

```{r}
#Sys.setenv(SPOTIFY_CLIENT_ID = 'XXXXXXXXXXXX')
#Sys.setenv(SPOTIFY_CLIENT_SECRET = 'XXXXXXXXXXXX')
access_token <- get_spotify_access_token()
swifty <- get_artist_audio_features('taylor swift')
```

To give you an idea of the sort of information we now have at our fingertips, here's an example row of data, for our (yes, probably you) favorite song: 

```{r}
swifty |> 
  filter(track_name == "All Too Well (10 Minute Version) (Taylor's Version) (From The Vault)") 
```

Some of the information is obvious, but others I had to do some exploring to learn more about. Let's review: 

*danceability:* Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.

*energy:* Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.

*key:* The key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. (https://en.wikipedia.org/wiki/Pitch_class). Key_mode is a more helpful interpretation for us.

*loudness:* The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.

*mode:* Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.

*speechiness:* Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.

*acousticness:* A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.

*instrumentalness:* Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.

*liveness:* Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.

*valence:* A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).

*tempo:* The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.

```{r include = FALSE}
# NOTES TO SELF
# potenital covariates
# - track number 
# - album 
# - date
# - person dating at time
# - taylor's version
# - album images -- colors? 
# - release dates
# - other artists 
# 
# - track name
# INFO TO ADD? 
# - dates of person dating 
# - major life events 
# - tours
```

```{r include = FALSE}
track_plays <- read_csv("track_plays.csv", col_names = TRUE) |> 
  select(-1)
# track_plays <- swifty |> 
#   select(track_id, track_name) |> 
#   add_column(plays = NA,
#              date_retrieved = date())
```

One very important piece of information that we are not allowed to access from Spotify, for some unknown but infuriating nonetheless reason, is playback or number of streams. We can get it for our own account (maybe I'll do that another time), but not for all users ever. But....

It's hard to fight when thе fight ain't fair
We're getting stronger now, find things they never found
They might be bigger but we're faster and never scared

So, yes, we can get streaming info. It's just a bit of an adventure into Wonderland! I found and subscribed to a potentially-sketchy web API... https://rapidapi.com/developer/dashboard

Now, I can pull streaming/playback info (caveat, only for 20 songs per day). So, this project will take a while to complete for streaming info. Unless Spotify allows us to pull streaming info for songs some time soon, which is doubtful, I'll keep using this API I'm now subscribed to.

The following code queries the database (tbd on when that playback info is backdated?) using the track_id. 

```{r}
# queryString <- list(spotify_track_id = "XXXXXXXXXX")
# 
# response <- VERB("GET", 
#                  url, 
#                  query = queryString, 
#                  add_headers('X-RapidAPI-Key' = '19547ae2bdmsh4d5cd37c8c39d7fp1a033bjsnaa6639064938', 
#                              'X-RapidAPI-Host' = 'spotify-track-streams-playback-count1.p.rapidapi.com'),
#                  content_type("application/octet-stream"))
```

test for Lavender Haze

track id = 24emu3sabKISjRkrys28jq

```{r}
# queryString <- list(spotify_track_id = "24emu3sabKISjRkrys28jq")
# 
# # response <- VERB("GET", 
# #                  url, 
# #                  query = queryString, 
# #                  add_headers('X-RapidAPI-Key' = '19547ae2bdmsh4d5cd37c8c39d7fp1a033bjsnaa6639064938', 
# #                              'X-RapidAPI-Host' = 'spotify-track-streams-playback-count1.p.rapidapi.com'),
# #                  content_type("application/octet-stream"))
# 
# content(response, "text")
```

Which results in a text list containing (among other things) the track_id and stream number, which we can add to our file somewhat manually, like so: 

```{r}
# track_plays[4, 3] <- content(response)[4][[1]]
# track_plays[4, 4] <- date()
```

Of course I'd prefer not to do that for 465 songs, so let's loop that shit. 

First, we want to set up a subset for N tracks that we want to get playback info for, so we don't break the bank ($.50 per additional API call after 20... that's more money than I have in my bank account!!!). Then we send that subset into the loop, get playback info for the track, add plaayback info and the date it was accessed to our track_plays file, rinse and repeat. 

```{r}
# url <- "https://spotify-track-streams-playback-count1.p.rapidapi.com/tracks/spotify_track_streams"
# 
# no_plays <- track_plays |> 
#   filter(is.na(plays)) |> 
#   head(6)
# 
# for(t in 1:nrow(no_plays)){
#   track <- no_plays[t, 1]
#   queryString <- list(spotify_track_id = track$track_id)
#   response <- VERB("GET",
#                    url,
#                    query = queryString,
#                    add_headers('X-RapidAPI-Key' = '19547ae2bdmsh4d5cd37c8c39d7fp1a033bjsnaa6639064938',
#                                'X-RapidAPI-Host' = 'spotify-track-streams-playback-count1.p.rapidapi.com'),
#                    content_type("application/octet-stream"))
#   track_plays[which(track_plays$track_id==track$track_id), 3] <- content(response)[4][[1]]
#   track_plays[which(track_plays$track_id==track$track_id), 4] <- date()
# }

# in case need to do a manual entry 
#track_plays[which(track_plays$track_id=="0GKDhq6ZbmSbRHd3eyGlB7"), 3] <- 229475778
```

I then write this file out to a csv to store it after each day's API access is maxed so I can read it in and add more data the next day (so long as I remember to do so). At this rate, it will take probably a month (if I am diligent and make minimal errors) to get all of the stream data in. 

```{r}
track_plays
```

```{r}
write.csv(track_plays, "track_plays.csv")
```

To bring it all full circle, we can also add track_plays to the swifty data!!!

```{r}
swifty <- left_join(swifty, track_plays, by = c("track_name", "track_id"))
glimpse(swifty)
```

------------

Giving credit where credit is VERY due: 

https://shaynak.github.io/taylor-swift/ -- while I'm pretty confident in my brain's ability to store endless lyrics, this website made possible all of the lyrics and references found throughout this project

