---
title: "the eras touR"
author: "Jayde Homer"
date: "2023-06-06"
categories: [fun]
image: "eras.jpg"
---

Can I ask you a question? Have you ever wondered which of Taylor Swift's songs are the most danceable? Which songs are saddest? Slowest? Lowest? Well, if the answer is no, you're playing a stupid game and you've won a stupid prize -- leave now. Assuming the answer to any of those questions was an incredibly enthusiastic YES, then you're the lucky one. 

So, R you ready for it? 

**DISCLAIMER:** Obviously I'm a *very busy important person* so I'm not going to answer ALL of your questions today, but I'll try my very best to keep coming back and working on this, so please come back and check it out. 

```{r include = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
# super secret secrets
Sys.setenv(SPOTIFY_CLIENT_ID = 'd02bf172d10540daa563dfb3671241f0')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'c6ea7afd62114def98b269c6b160721b')
```

Here are the packages we'll be using. 

```{r}
library(spotifyr) # to access spotify API
library(tidyverse) # for all things workflow + stringr
library(knitr) # for pretty-ish tables
library(lubridate) # for nice date handling 
```

## Spotify API

Using (Spotify's Web API)[https://developer.spotify.com/documentation/web-api], we can access all sorts of fun information about an artist. If you're following along at home and wondering if this is the explicit version with all those Xs below, no. I'm just avoiding giving you my super secret client_id and client_secret. You can get your own by visiting your Spotify developer dashboard. 

```{r}
# albums we/I don't want included in the data
ew_david <- c("Live From Clear Channel Stripped 2008", 
               "Speak Now World Tour Live",
              "reputation Stadium Tour Surprise Song Playlist")
```


```{r}
#Sys.setenv(SPOTIFY_CLIENT_ID = 'XXXXXXXXXXXX')
#Sys.setenv(SPOTIFY_CLIENT_SECRET = 'XXXXXXXXXXXX')
access_token <- get_spotify_access_token()
swifty <- get_artist_audio_features('taylor swift') |> 
  filter(!album_name %in% ew_david)
```

To give you an idea of the sort of information we now have at our fingertips, here's an example row of data, for everyone's favorite song: 

```{r}
swifty |> 
  filter(track_name == 
           "All Too Well (10 Minute Version) (Taylor's Version) (From The Vault)") |> 
  kable()
```

## Summary 

You may already know this, but here's a summary of Taylor's discography. 

```{r}
swifty |> 
  summarize(`Number of Songs` = n_distinct(track_name),
            `Albums Released` = n_distinct(album_name),
            `Earliest Release` = min(year(album_release_date)),
            `Most Recent Release` = max(year(album_release_date)),
            `Songs Featuring Other Artists` = sum(str_detect(track_name, "feat")),
            `Songs with Explicit Labels` = sum(explicit),
            `Shortest Song Minutes` = min(duration_ms)/60000,
            `Longest Song Minutes` = max(duration_ms)/60000,
            `Average Song Minutes` = mean(duration_ms)/60000
            ) |> 
  pivot_longer(cols = everything()) |> 
  mutate(value = as.character(round(value, 2))) |> 
  kable()
```

| Metric Name | Definition | Possible Values |
|---------|:-----|------:|
| *danceability*      | how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity   | 0 -- 1 |
| *energy*     | perceptual measure of intensity and activity by way of dynamic range, perceived loudness, timbre, onset rate, and general entropy  |   0 -- 1 |
| *key*       | key the track is in   |   standard Pitch Class notation. [E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on](https://en.wikipedia.org/wiki/Pitch_class) |
| *loudness*      | overall loudness of a track in decibels (dB) averaged across the entire track |  -60 -- 0 db. |
| *mode*     | modality (major or minor) of a track; the type of scale from which its melodic content is derived  |   major = 1; minor = 0 |
| *speechiness*       | the presence of spoken words in a track | speech-like recordings are closer to 1.0 (e.g., > 0.66 = tracks made entirely of spoken words, between 0.33 and 0.66 = tracks containing music and speech such as rap music, < 0.33 = tracks mostly music and other non-speech-like sounds |
| *acousticness*      | confidence measure from 0.0 to 1.0 of whether the track is acoustic |    0 -- 1 |
| *instrumentalness*     | predicts whether a track contains no vocals; "ooh" and "aah" sounds are treated as instrumental with rap and spoken word tracks clearly "vocal"  |   0 -- 1 (more vocals to less vocals) |
| *liveness*       | detects the presence of an audience in the recording |  0 -- 1 (> 0.8 indicates strong likelihood of live track) |
| *valence*      | musical positiveness conveyed by a track  |    0 -- 1 (low valence (e.g., sad, depressed, angry) to high valence (e.g., happy, cheerful, euphoric)) |
| *tempo*     | overall estimated tempo of a track in beats per minute (BPM)  |  40 -- 200+ |

: Spotify's Music Metrics

```{r include = FALSE}
# NOTES TO SELF
# potenital covariates
# - track number 
# - album 
# - date
# - person dating at time
# - taylor's version
# - album images -- colors? 
# - release dates
# - other artists 
# 
# - track name
# INFO TO ADD? 
# - dates of person dating 
# - major life events 
# - tours
```

## Taylor's Version vs. Not(?) Taylor's Version

For my first bit of exploration, I'm wondering how much a difference Taylor made in how Taylory Taylor is. 

First, let's add a boolean that tells us if a song is Taylor's Version. Dirty data problem 1 of ???: tick marks vs. apostrophes. And this is why we use [unicode](https://home.unicode.org/), friends. 

```{r}
swifty <- swifty |> 
  mutate(isTV = str_detect(track_name, "Taylor's Version|Taylor’s Version")) 
```

Now that we have TV as it's own variable, we can make our data one step closer to some sort of [normal form](https://www.geeksforgeeks.org/normal-forms-in-dbms/) by making sure that track name contains one and only one type of information: the track name. 

::: {.callout-tip}
## Tip: stringr

[Stringr](https://stringr.tidyverse.org/) is one of my favorite tools in the tidyverse, especially for dealing with any sort of text data. Here I used: 

- `str_remove()` to remove (Taylor's Version) from song titles to better group them later
- `str_squish()` to remove any whitespace from the start and end, and reduce any double spaces within a song to a single space
- `str_to_lower()` is the cute little sister of `str_to_upper()` and converts characters to lowercase
- `str_replace_all()` replaces all of the target string (in this case all punctuation) with the replacement string (in this case nothingness)
:::

```{r}
swifty <- swifty |> 
  mutate(track_name = str_remove(track_name, "\\(Taylor's Version\\)|\\(Taylor’s Version\\)"),
         track_name = str_squish(track_name),
         track_name = str_to_lower(track_name),
         track_name = str_replace_all(track_name, "[[:punct:]]", ""))
```

Now we can grab just our songs that have a TV and a no-TV. 

```{r}
songs_with_tvs <- swifty |> 
  group_by(track_name) |> 
  summarize(n = n(),
            hasTV = sum(isTV)) |> 
  filter(n > 1 & hasTV > 0)
```

Let's take a look at danceability first. Looks like there is a general trend for Taylor's Version of songs to be less danceable. 

```{r}
swifty |> 
  filter(track_name %in% songs_with_tvs$track_name) |> 
  group_by(track_name, isTV) |> 
  summarize(dance = mean(danceability)) |> 
  ggplot(aes(x = isTV, y = dance, group = track_name)) +
  geom_point() + 
  geom_line(method = "lm")
```


------------

References: 

 -- while I'm pretty confident in my brain's ability to store endless lyrics, [this website](https://shaynak.github.io/taylor-swift/) made possible all of the lyrics and references found throughout this project

